/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∏–≥—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');
const https = require('https');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
const assetsDir = path.join(__dirname, 'assets');
const imagesDir = path.join(assetsDir, 'images');

if (!fs.existsSync(assetsDir)) {
    fs.mkdirSync(assetsDir);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è assets/');
}

if (!fs.existsSync(imagesDir)) {
    fs.mkdirSync(imagesDir);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è assets/images/');
}

// –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const images = [
    {
        name: 'red_snail.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/red_snail.png'
    },
    {
        name: 'green_snail.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/green_snail.png'
    },
    {
        name: 'blue_snail.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/blue_snail.png'
    },
    {
        name: 'lilac_snail.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/purple_snail.png'
    },
    {
        name: 'yellow_snail.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/yellow_snail.png'
    },
    {
        name: 'wall_texture.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/wall.png'
    },
    {
        name: 'start.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/start.png'
    },
    {
        name: 'finish.png',
        url: 'https://raw.githubusercontent.com/telegramgames/snailrace/main/images/finish.png'
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(imageInfo) {
    return new Promise((resolve, reject) => {
        const filePath = path.join(imagesDir, imageInfo.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (fs.existsSync(filePath)) {
            console.log(`‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${imageInfo.name} - —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return resolve();
        }
        
        const file = fs.createWriteStream(filePath);
        
        https.get(imageInfo.url, (response) => {
            if (response.statusCode !== 200) {
                reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${imageInfo.name}: HTTP ${response.statusCode}`));
                return;
            }
            
            response.pipe(file);
            
            file.on('finish', () => {
                file.close();
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª ${imageInfo.name}`);
                resolve();
            });
        }).on('error', (err) => {
            fs.unlink(filePath, () => {}); // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${imageInfo.name}:`, err.message);
            reject(err);
        });
    });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async function downloadAllImages() {
    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const failedImages = [];
    
    for (const imageInfo of images) {
        try {
            await downloadImage(imageInfo);
        } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${imageInfo.name}:`, error.message);
            failedImages.push(imageInfo.name);
        }
    }
    
    if (failedImages.length > 0) {
        console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
        failedImages.forEach(name => console.log(`   - ${name}`));
        console.log('\n–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤ –ø–∞–ø–∫—É assets/images/');
    } else {
        console.log('\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
    }
    
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:');
    console.log('node start-app.js');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
downloadAllImages(); 