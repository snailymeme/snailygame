/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã Snail to Riches
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç ngrok –∏ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const http = require('http');
const express = require('express');

console.log('========================================');
console.log('üêå –ó–∞–ø—É—Å–∫ Snail to Riches');
console.log('========================================');

// –ü–æ—Ä—Ç –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
const port = 3000;
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(__dirname));

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏
function killProcess(name) {
  return new Promise((resolve) => {
    const cmd = process.platform === 'win32'
      ? `taskkill /F /IM ${name} /T`
      : `pkill -f "${name}"`;
    
    exec(cmd, (error) => {
      if (error) {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      }
      resolve();
    });
  });
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function cleanup() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
  await killProcess('ngrok');
  await killProcess('node bot.js');
  // –ñ–¥–µ–º —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
  await new Promise(resolve => setTimeout(resolve, 1000));
}

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  return new Promise((resolve) => {
    const server = http.createServer(app);
    server.listen(port, () => {
      console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      resolve(server);
    });
  });
}

// –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ ngrok
function startNgrok() {
  return new Promise((resolve) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ ngrok...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π URL-—Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync('ngrok-url.txt')) {
      fs.unlinkSync('ngrok-url.txt');
    }
    
    const ngrokProcess = spawn('node', ['run-ngrok.js'], {
      stdio: 'inherit'
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å URL
    const checkUrlFile = () => {
      if (fs.existsSync('ngrok-url.txt')) {
        try {
          const url = fs.readFileSync('ngrok-url.txt', 'utf8').trim();
          if (url) {
            console.log(`‚úÖ ngrok URL: ${url}`);
            resolve({ process: ngrokProcess, url });
            return;
          }
        } catch (e) {}
      }
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(checkUrlFile, 1000);
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(checkUrlFile, 3000);
  });
}

// –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
function startBot(ngrokUrl) {
  return new Promise((resolve) => {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    
    const botProcess = spawn('node', ['bot.js'], {
      stdio: 'inherit',
      env: {
        ...process.env,
        NGROK_URL: ngrokUrl
      }
    });
    
    botProcess.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error.message}`);
    });
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    setTimeout(() => {
      console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
      resolve(botProcess);
    }, 2000);
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –û—á–∏—Å—Ç–∫–∞
    await cleanup();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = await startServer();
    
    // –ó–∞–ø—É—Å–∫ ngrok
    const { url } = await startNgrok();
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await startBot(url);
    
    console.log('========================================');
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log(`üåê URL: ${url}`);
    console.log('========================================');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      await killProcess('ngrok');
      await killProcess('node bot.js');
      server.close();
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      process.exit(0);
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main(); 