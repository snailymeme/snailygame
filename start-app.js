/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã Snail to Riches
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç ngrok –∏ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const execPromise = promisify(exec);
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

console.log('========================================');
console.log('üêå –ó–∞–ø—É—Å–∫ Snail to Riches');
console.log('========================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
async function checkPort(port) {
  try {
    const { stdout, stderr } = await execPromise(`lsof -i :${port} | grep LISTEN`);
    if (stdout) {
      console.log(`‚ùå –ü–æ—Ä—Ç ${port} —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç...`);
      return false;
    }
    return true;
  } catch (error) {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—à–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–Ω–∞—á–∏—Ç –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    return true;
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function killProcesses(processName) {
  try {
    const isWindows = process.platform === 'win32';
    const cmd = isWindows 
      ? `taskkill /F /IM ${processName} /T`
      : `pkill -f "${processName}"`;
    
    await execPromise(cmd);
    console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${processName} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
  } catch (error) {
    console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å ${processName} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.`);
  }
}

// –ó–∞–ø—É—Å–∫ ngrok –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL
async function startNgrok() {
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π URL —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (fs.existsSync('ngrok-url.txt')) {
    fs.unlinkSync('ngrok-url.txt');
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç ngrok
  const ngrokProcess = spawn('node', ['run-ngrok.js'], {
    stdio: 'inherit',
    shell: true
  });
  
  ngrokProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok:', error);
    process.exit(1);
  });
  
  // –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å URL (–¥–æ 30 —Å–µ–∫—É–Ω–¥)
  let attempts = 0;
  const maxAttempts = 30;
  let ngrokUrl = '';
  
  while (attempts < maxAttempts) {
    await sleep(1000);
    attempts++;
    
    if (fs.existsSync('ngrok-url.txt')) {
      try {
        ngrokUrl = fs.readFileSync('ngrok-url.txt', 'utf8').trim();
        if (ngrokUrl && ngrokUrl.startsWith('http')) {
          console.log(`üåê –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω URL ngrok: ${ngrokUrl}`);
          return ngrokUrl;
        }
      } catch (err) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ URL, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
      }
    }
    
    if (attempts % 5 === 0) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ URL ngrok... (${attempts}/${maxAttempts})`);
    }
  }
  
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL ngrok –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot(ngrokUrl) {
  console.log('\nü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
  
  if (!ngrokUrl) {
    console.error('‚ùå URL ngrok –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.');
    process.exit(1);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å URL
  process.env.WEB_APP_URL = ngrokUrl;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  if (!(await checkPort(3000))) {
    await killProcesses('node bot.js');
    // –ñ–¥–µ–º, —á—Ç–æ–±—ã –ø–æ—Ä—Ç —Ç–æ—á–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è
    await sleep(2000);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  const botProcess = spawn('node', ['bot.js'], {
    stdio: 'inherit',
    shell: true,
    env: {...process.env}
  });
  
  botProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  });
  
  await sleep(2000);
  console.log('\n‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –û—Ç–∫—Ä–æ–π —Å–≤–æ–π Telegram –±–æ—Ç –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏–≥—Ä–æ–π.');
  console.log(`üì± URL –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${ngrokUrl}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
    await killProcesses('node run-ngrok.js');
    await killProcesses('ngrok');
    await sleep(1000);
    await killProcesses('node bot.js');
    await sleep(2000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if (!(await checkPort(3000))) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç 3000. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã.');
      process.exit(1);
    }
    
    // –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const ngrokUrl = await startNgrok();
    await startBot(ngrokUrl);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
process.on('SIGINT', async () => {
  console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  await killProcesses('ngrok');
  await killProcesses('node run-ngrok.js');
  await killProcesses('node bot.js');
  console.log('–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main(); 