#!/usr/bin/env node

/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Snail to Riches
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

const { spawn, exec, spawnSync } = require('child_process');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const MODE = args.find(arg => arg.startsWith('--mode='))?.split('=')[1] || 'full';
const CLEAN = args.includes('--clean');
const HELP = args.includes('--help') || args.includes('-h');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–º–æ—â—å
if (HELP) {
    console.log(`
Snail to Riches - –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node start.js [options]

–û–ø—Ü–∏–∏:
  --mode=<—Ä–µ–∂–∏–º>  –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (full, app, bot, ngrok)
  --clean         –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç—ã –∏ –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  --help, -h      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–†–µ–∂–∏–º—ã:
  full   –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  app    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
  bot    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
  ngrok  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ ngrok —Ç—É–Ω–Ω–µ–ª—å
    `);
    process.exit(0);
}

console.log('========================================');
console.log('üêå –ó–∞–ø—É—Å–∫ Snail to Riches');
console.log('========================================');
console.log(`–†–µ–∂–∏–º: ${MODE}, –û—á–∏—Å—Ç–∫–∞: ${CLEAN ? '–î–∞' : '–ù–µ—Ç'}`);

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏
function killProcess(name) {
    return new Promise((resolve) => {
        console.log(`üßπ –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${name}`);
        
        const cmd = process.platform === 'win32'
            ? `taskkill /F /IM ${name} /T`
            : `pkill -f "${name}"`;
        
        exec(cmd, (error) => {
            if (error) {
                console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            } else {
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }
            resolve();
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
async function cleanupPorts() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...');
    
    // –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    const ports = [3000, 3001, 4040];
    
    for (const port of ports) {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ${port}...`);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç
        const findCmd = process.platform === 'win32'
            ? `netstat -ano | findstr :${port}`
            : `lsof -i :${port} | grep LISTEN`;
        
        try {
            const { stdout } = await exec(findCmd);
            
            if (stdout) {
                console.log(`–ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç.`);
                
                // –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
                let pid;
                if (process.platform === 'win32') {
                    // Windows: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "TCP    127.0.0.1:3000    LISTENING    1234"
                    pid = stdout.trim().split(/\s+/).pop();
                } else {
                    // UNIX-–ø–æ–¥–æ–±–Ω—ã–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "node    1234    user    15u    ..."
                    pid = stdout.trim().split(/\s+/)[1];
                }
                
                if (pid) {
                    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    const killCmd = process.platform === 'win32'
                        ? `taskkill /F /PID ${pid}`
                        : `kill -9 ${pid}`;
                    
                    await exec(killCmd);
                    console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} –Ω–∞ –ø–æ—Ä—Ç—É ${port} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                }
            } else {
                console.log(`–ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
            }
        } catch (error) {
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            console.log(`–ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`);
        }
    }
}

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
    return spawn('npx', ['http-server', '.', '-p', '3000'], {
        stdio: 'inherit'
    });
}

// –ó–∞–ø—É—Å–∫ ngrok
function startNgrok() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ ngrok...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π URL-—Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync('ngrok-url.txt')) {
        fs.unlinkSync('ngrok-url.txt');
    }
    
    return new Promise((resolve) => {
        const ngrokProcess = spawn('node', ['run-ngrok.js'], {
            stdio: 'inherit'
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å URL
        const checkUrlFile = () => {
            if (fs.existsSync('ngrok-url.txt')) {
                try {
                    const url = fs.readFileSync('ngrok-url.txt', 'utf8').trim();
                    if (url) {
                        console.log(`‚úÖ ngrok URL: ${url}`);
                        resolve({ process: ngrokProcess, url });
                        return;
                    }
                } catch (e) {}
            }
            
            // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(checkUrlFile, 1000);
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(checkUrlFile, 3000);
    });
}

// –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
function startBot(ngrokUrl) {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    
    const env = { ...process.env };
    if (ngrokUrl) {
        env.NGROK_URL = ngrokUrl;
    }
    
    return spawn('node', ['bot.js'], {
        stdio: 'inherit',
        env
    });
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanupFiles() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const filesToRemove = [
        'ngrok-url.txt',
        'ngrok_output.txt'
    ];
    
    filesToRemove.forEach(file => {
        if (fs.existsSync(file)) {
            fs.unlinkSync(file);
            console.log(`‚úÖ –§–∞–π–ª ${file} —É–¥–∞–ª–µ–Ω`);
        }
    });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        // –û—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
        if (CLEAN) {
            await cleanupPorts();
            cleanupFiles();
            
            // –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            await killProcess('ngrok');
            await killProcess('node bot.js');
            await killProcess('http-server');
            
            // –ñ–¥–µ–º —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        let serverProcess, ngrokData, botProcess;
        
        // –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        switch (MODE) {
            case 'full':
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                serverProcess = startServer();
                ngrokData = await startNgrok();
                botProcess = startBot(ngrokData.url);
                break;
                
            case 'app':
                // –¢–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
                serverProcess = startServer();
                break;
                
            case 'bot':
                // –¢–æ–ª—å–∫–æ –±–æ—Ç
                botProcess = startBot();
                break;
                
            case 'ngrok':
                // –¢–æ–ª—å–∫–æ ngrok
                ngrokData = await startNgrok();
                break;
                
            default:
                console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${MODE}`);
                process.exit(1);
        }
        
        console.log('========================================');
        console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!');
        if (ngrokData?.url) {
            console.log(`üåê URL: ${ngrokData.url}`);
        }
        console.log('========================================');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', async () => {
            console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if (serverProcess) serverProcess.kill();
            if (ngrokData?.process) ngrokData.process.kill();
            if (botProcess) botProcess.kill();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await killProcess('ngrok');
            await killProcess('node bot.js');
            await killProcess('http-server');
            
            console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
            process.exit(0);
        });
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
main(); 